# from graphics import *
from button import *
from random import randint


class Wordle:
    def __init__(self, interface):
        self.wordle = ""
        self.answer = ""
        self.attempts = 0
        self.interface = interface

    def pickAnswer(self):
        # choose one answer from wordle-words.txt
        filename = "wordle-words.txt"
        fileobject = open(filename, 'r')
        list_of_wordles = fileobject.readlines()

        w = randint(0,len(list_of_wordles)-1)
        self.answer = list_of_wordles[w].strip()
        return self.answer
    
    def user_guess(self, guess):
        # get user's guess
        self.wordle = guess.upper()
    
    def check(self, answer):
        # check whether the user's guess is correct or not
        return self.wordle == answer
    
    def hints(self):
        ch = []
        pos = []

        for v in range(5):
            for k in range(5):
                if self.wordle[v] == self.answer[k]:
                    # both character and position are the same as answer
                    if v == k:
                        pos.append(self.wordle[v])
                    # just character is in the answer
                    else:
                        ch.append(self.wordle[v])
        return ch, pos

    
    def count(self):
        # the number of times user has guessed the word
        self.attempts += 1
        return self.attempts
    
    def gameOver(self):
        # return True if user has attempted 6 times
        return self.attempts == 6

    def run(self):
        self.playWordle()
        while True:
            if self.interface.want_To_Play() == True:
                self.attempts = 0
                self.playWordle()
            else:
                break
    
    def playWordle(self):
        self.attempts = self.game()
        if self.attempts < 6:
            self.interface.correct_Guess(self.attempts)
        else:
            self.interface.show_answer(self.answer)
    
    def game(self):
        self.pickAnswer()   # answer is stored to self.answer
        print(self.answer)

        while not self.check(self.answer) and not self.gameOver():
        # less than 6 attempts and guess is incorrect
            self.interface.setGuess(6 - self.attempts)
            self.count()
            g = self.interface.ask_guess()
            self.user_guess(g)        # user's guess is stored to self.wordle
            self.check(self.answer)
            ch, pos = self.hints()
            self.interface.give_hints(ch, pos)

        return self.attempts



class textInterface:
    def __init__(self):
        print("Can you guess the Wordle?")
    
    def ask_guess(self):
        g = input("What is your guess? ")
        while len(g) != 5:
            g = input("What is your guess? ")
        return g

    def setGuess(self, numG):
        print("You have {0} attempts left".format(numG))
    
    def correct_Guess(self, numG):
        print("You guess the Wordle in {0} guesses.".format(numG))
    
    def give_hints(self, ch, pos):
        if len(ch) != 0:
            print("{0} are in the answer in a differest position".format(ch))
        elif len(pos) != 0:
            print("{0} are in the answer in the same position".format(pos))
    
    def show_answer(self, ans):
        print("Wordle: {0}".format(ans))
    
    def want_To_Play(self):
        resp = input("Do you want to play again? ")
        return resp[0] in "yY"




class GraphicsInterface:
    def __init__(self):
    # create the window for Wordle
        win = GraphWin("Wordle", 600, 600)
        win.setCoords(0,0,12,18)
        win.setBackground('White')
        self.win = win

    # create list of buttons
        bSpecs = [(1.5,5,'Q'),(2.5,5,'W'),(3.5,5,'E'),(4.5,5,'R'),(5.5,5,'T'),(6.5,5,'Y'),(7.5,5,'U'),(8.5,5,'I'),(9.5,5,'O'),(10.5,5,'P'),
                  (2,4,'A'),(3,4,'S'),(4,4,'D'),(5,4,'F'),(6,4,'G'),(7,4,'H'),(8,4,'J'),(9,4,'K'),(10,4,'L'),
                            (3,3,'Z'),(4,3,'X'),(5,3,'C'),(6,3,'V'),(7,3,'B'),(8,3,'N'),(9,3,'M')]
        
        self.buttons = []
        for (cx,cy,labels) in bSpecs:
            self.buttons.append(Button(self.win, Point(cx,cy),.75,.75, labels))

    # create the larger "ENTR", "DEL", "QUIT", and "Play Again" buttons
        self.buttons.append(Button(self.win, Point(1.9,3), 1.2, .75, "ENTR"))
        self.buttons.append(Button(self.win, Point(10.1,3), 1.2, .75, "DEL"))
        self.buttons.append(Button(self.win, Point(4,1), 1.2, .75, "Quit"))
        self.buttons.append(Button(self.win, Point(7.6,1), 1.2, .75, "Play Again"))
        
    # create rectangles
        rec_y_1 = 7.6
        rec_y_2 = 8.9

        for v in range(6):
            rec_x_1 = 1.1
            rec_x_2 = 2.9
            for h in range(5):
                # draw 5 rectangles horizontally
                rect = Rectangle(Point(rec_x_1, rec_y_1), Point(rec_x_2, rec_y_2))
                rect.setFill('White')
                rect.setOutline('lightgray')
                rect.draw(win)
                rec_x_1 += 2
                rec_x_2 += 2
            rec_y_1 += 1.5
            rec_y_2 += 1.5

    # activate buttons
        self.choose(["Q","W","E","R",'T','Y','U','I','O','P','A','S','D','F','G','H','J','K','L','Z','X','C','V','B','N','M',
                      "ENTR", "DEL", "Quit"])

    # create a banner
        self.msg = Text(Point(6,16), "Can you guess the Wordle?")
        self.msg.setSize(18)
        self.msg.setFill('darkgrey')
        self.msg.setStyle('bold')
        self.msg.draw(win)

    def choose(self, choices):
        buttons = self.buttons

        # activate choice buttons, deactivate others
        for b in buttons:
            if b.getLabel() in choices:
                b.activate()
            else:
                b.deactivate()
        
        # get mouse clicks until an active button is clicked
        while True:
            p = self.win.getMouse()
            for b in buttons:
                if b.clicked(p):
                    return b.getLabel()
    

    def correct_guess(self, numG):
        self.msg.setText("You guess the Wordle in {0} guesses.".format(numG))
    
    def want_to_play(self):
        ans = self.choose(["Quit", "Play Again"])

    def close(self):
        self.win.close()
        


def test_Wordle():
    inter = GraphicsInterface()
    game = Wordle(inter)
    game.run()

test_Wordle()